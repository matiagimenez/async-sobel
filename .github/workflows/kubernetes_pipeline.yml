name: Kubernetes pipeline

on:
    push:
        branches: ['main']
jobs:
    build-images:
        name: Build and Push Docker Image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_PASSWORD }}

            - name: Build and push split service image
              uses: docker/build-push-action@v5
              with:
                  context: ./split-service
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/split-service:latest

            - name: Build and push entry server image
              uses: docker/build-push-action@v5
              with:
                  context: ./entry-server
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/entry-server:latest

            - name: Build and push join service image
              uses: docker/build-push-action@v5
              with:
                  context: ./join-service
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/join-service:latest
    infra-up:
        name: Build Kubernetes infrastructure
        if: startsWith(github.event.head_commit.message, '(up)')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            # Setup de CLI de Terraform
            - name: Terraform setup
              uses: hashicorp/setup-terraform@v3

            # Crea el cluster en la nube.
            - name: Terraform init
              working-directory: kubernetes/terraform
              env:
                  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
              run: |
                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json

                  ls -lah

                  BUCKET_NAME="terraform_state_cloud"
                  PREFIX="cluster/state"

                  terraform init --reconfigure \
                    --backend-config "bucket=${BUCKET_NAME}" \
                    --backend-config "prefix=${PREFIX}"

                  terraform validate

                  terraform plan -lock=false

                  terraform apply -lock=false --auto-approve

    install-argo:
        name: Install Argo CD tool
        if: startsWith(github.event.head_commit.message, '(up)')
        needs: infra-up
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.6

            # Configuración CLI Google Cloud.
            - name: GCP authentication
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: GCP kubectl plugin
              uses: google-github-actions/setup-gcloud@v2
              with:
                  version: '>= 363.0.0'
                  install_components: 'kubectl'

            - name: Get Kubernetes cluster credentials
              run: |
                  REGION="us-central1-a"
                  gcloud info
                  gcloud components list
                  gcloud container clusters get-credentials primary --region=${REGION}

            - name: Check if Argo CD namespace exists
              id: check_namespace
              run: |
                  if kubectl get namespace argocd; then
                    echo "Namespace argocd already exists."
                    echo "::set-output name=exists::true"
                  else
                    echo "Namespace argocd does not exist."
                    echo "::set-output name=exists::false"
                  fi

            - name: Create Argo CD namespace
              if: steps.check_namespace.outputs.exists == 'false'
              run: |
                  kubectl create namespace argocd
                  kubectl create namespace services

            - name: Install Argo CD
              if: steps.check_namespace.outputs.exists == 'false'
              run: |
                  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    configure-argo:
        name: Configure Argo CD tool
        if: startsWith(github.event.head_commit.message, '(up)')
        needs: install-argo
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.1.6

            # Configuración CLI Google Cloud.
            - name: GCP authentication
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: GCP kubectl plugin
              uses: google-github-actions/setup-gcloud@v2
              with:
                  version: '>= 363.0.0'
                  install_components: 'kubectl'

            - name: Get Kubernetes cluster credentials
              run: |
                  REGION="us-central1-a"
                  gcloud info
                  gcloud components list
                  gcloud container clusters get-credentials primary --region=${REGION}

            - name: Install Argo CD CLI
              run: |
                  curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                  chmod +x /usr/local/bin/argocd

            - name: Start port forwarding
              shell: bash
              run: |
                  kubectl wait --for=condition=available --timeout=120s deploy/argocd-server -n argocd
                  kubectl port-forward svc/argocd-server -n argocd 8080:443 &
                  sleep 10  # Gives additional time for the port forwarding to establish

            - name: Retrieve Argo CD API server password
              run: |
                  ARGOCD_PWD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                  echo "ARGOCD_PWD=$ARGOCD_PWD" >> $GITHUB_ENV

            - name: Login to Argo CD
              run: echo y | argocd login localhost:8080 --username admin --password $ARGOCD_PWD --insecure
              env:
                  ARGOCD_PWD: ${{ env.ARGOCD_PWD }}

            - name: Create infra services
              working-directory: kubernetes/argocd
              run: |
                  kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"
                  sleep 60
                  kubectl apply -f services-project.yml
                  kubectl apply -f services.yml
                  sleep 120

            # Crear un nuevo ConfigMap con las credenciales de RabbitMQ
            - name: Create RabbitMQ config
              working-directory: kubernetes
              run: |
                  RABBITMQ_PASSWORD=$(kubectl get secret rabbitmq-default-user -o jsonpath="{.data.password}" -n argocd | base64 --decode)
                  RABBITMQ_USER=$(kubectl get secret rabbitmq-default-user -o jsonpath="{.data.username}" -n argocd | base64 --decode)

                  # Crear un nuevo ConfigMap con las credenciales de RabbitMQ
                  cat <<EOF | kubectl apply -f -
                  apiVersion: v1
                  kind: ConfigMap
                  metadata:
                    name: rabbit-config
                    namespace: argocd
                  data:
                    RABBITMQ_USER: $RABBITMQ_USER
                    RABBITMQ_PASSWORD: $RABBITMQ_PASSWORD
                    RABBITMQ_HOST: rabbitmq
                  EOF

            - name: Set high availability policy for RabbitMQ cluster
              run: |
                  kubectl exec -it rabbitmq-server-0 -n argocd -- rabbitmqctl set_policy ha-policy ".*sobel.*" \ '{"ha-mode":"exactly","ha-params":2,"ha-sync-mode":"automatic"}'

            # Crear un nuevo ConfigMap con las credenciales de GCP
            - name: Create GCP configuration
              working-directory: kubernetes
              run: |
                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json
                  kubectl create configmap -n argocd credentials-config --from-file=credentials.json

            - name: Create applications
              working-directory: kubernetes/argocd
              run: |
                  kubectl apply -f applications-project.yml
                  kubectl apply -f applications.yml

    infra-destroy:
        name: Destroy Kubernetes infrastructure
        if: startsWith(github.event.head_commit.message, '(down)')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

              # Setup de CLI de Terraform
            - name: Terraform setup
              uses: hashicorp/setup-terraform@v3

              # Crea el cluster en la nube.
            - name: Terraform init
              working-directory: kubernetes/terraform
              env:
                  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
              run: |
                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json

                  ls -lah

                  BUCKET_NAME="terraform_state_cloud"
                  PREFIX="cluster/state"

                  terraform init --reconfigure \
                    --backend-config "bucket=${BUCKET_NAME}" \
                    --backend-config "prefix=${PREFIX}"

                  terraform destroy -lock=false --auto-approve
