name: Kubernetes pipeline

on:
    push:
        branches: ['main']
        # paths: ['TP4/ej3/**']
jobs:
    build-images:
        name: Build and Push Docker Image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_PASSWORD }}

            - name: Build and push split service image
              uses: docker/build-push-action@v2
              with:
                  context: ./split-service
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/split-service:latest

            - name: Build and push entry server image
              uses: docker/build-push-action@v2
              with:
                  context: ./entry-server
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/entry-server:latest

            - name: Build and push join service image
              uses: docker/build-push-action@v2
              with:
                  context: ./join-service
                  push: true
                  tags: ${{ secrets.DOCKER_HUB_USERNAME }}/join-service:latest
    infra-up:
        name: Build Kubernetes infrastructure
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            # Setup de CLI de Terraform
            - name: Terraform setup
              uses: hashicorp/setup-terraform@v2

            # Crea el cluster en la nube.
            - name: Terraform init
              working-directory: k8s/terraform
              env:
                  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
              run: |
                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json

                  ls -lah

                  BUCKET_NAME="terraform_state_cloud"
                  PREFIX="cluster/state"

                  terraform init --reconfigure \
                    --backend-config "bucket=${BUCKET_NAME}" \
                    --backend-config "prefix=${PREFIX}"

                  terraform validate

                  terraform plan -lock=false

                  terraform apply -lock=false --auto-approve

            # ConfiguraciÃ³n CLI Google Cloud.
            - name: Google Cloud authentication
              uses: google-github-actions/auth@v1
              with:
                  credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

            - name: Google Cloud kubectl plugin
              uses: google-github-actions/setup-gcloud@v1
              with:
                  version: '>= 363.0.0'
                  install_components: 'kubectl'

            - name: Google Cloud kubectl cluster metadata
              run: |
                  gcloud info

                  gcloud components list

                  gcloud container clusters get-credentials primary --region=us-east1-b

            # Despliega los objectos en la nube.
            - name: Kubernetes deploy
              working-directory: k8s
              run: |
                  kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=matias@braided-complex-416718.iam.gserviceaccount.com

                  kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"

                  sleep 90

                  kubectl apply -f deployments/rabbitmq.yml

                  sleep 200

                  RABBITMQ_PASSWORD=$(kubectl get secret rabbitmq-default-user -o jsonpath="{.data.password}" | base64 --decode)
                  RABBITMQ_USER=$(kubectl get secret rabbitmq-default-user -o jsonpath="{.data.username}" | base64 --decode)

                  # Crear un nuevo ConfigMap con las credenciales de RabbitMQ
                  cat <<EOF | kubectl apply -f -
                  apiVersion: v1
                  kind: ConfigMap
                  metadata:
                    name: rabbit-config
                  data:
                    RABBITMQ_USER: $RABBITMQ_USER
                    RABBITMQ_PASSWORD: $RABBITMQ_PASSWORD
                    RABBITMQ_HOST: rabbitmq
                  EOF

                  echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > credentials.json

                  # Crear un nuevo ConfigMap con las credenciales de GCP
                  kubectl create configmap credentials-config --from-file=credentials.json

                  kubectl apply -f config.yml

                  kubectl apply -f volumes/redis-data.yml

                  kubectl apply -f deployments/entry-server.yml
                  kubectl apply -f deployments/redis.yml
                  kubectl apply -f deployments/split-service.yml
                  kubectl apply -f deployments/join-service.yml

                  kubectl apply -f services/entry-server.yml
                  kubectl apply -f services/redis.yml
                  kubectl apply -f services/split-service.yml
                  kubectl apply -f services/join-service.yml
